package chargingScheduler;

import java.util.List;


import org.jgap.FitnessFunction;
import org.jgap.IChromosome;

public class Fitness{
	
	private static List<Car> cars;
	
	public Fitness( int a_targetAmount, List<Car> cars )
    {
		this.cars = cars;
    }
	
	
	double GetFitness(int[] solution) {
		// For best possible schedule, fitness should be 100 with current weightings and settings.
		
		int maxFitness = 300;
		int fitness = maxFitness; //Arbitrary starting value
		
		int i = 1; // The car value that appears in the gene.
		for (Car c : cars)
		{
			
			// Setup variables
			int chargeSpeed = 100; //Amount of charge per hour
			int hoursRequired = 0;
			int totalHours = 24;
			int hoursScheduledCount = numberOfHoursScheduled(a_subject, i);
			int hoursReqCount = 0;
			int hoursDist = 0;
			int carFitness = maxFitness;
			String hoursGivenString = "";
			String solutionString = "";
			
			if (c.prefEnd < c.prefStart)
			{
				for(int j = 0; j<24; j++)
				{
					if(j<=c.prefEnd || j>c.prefStart)
					{
						solution[j] = i;
					}
				}
			} else
			{
				for(int j = 0; j<24; j++)
				{
					if(j<=c.prefEnd && j>c.prefStart)
					{
						solution[j] = i;
					}
				}
			}
			
			//TEMP: Assume car needs half as many hours to charge as hours given
			hoursRequired = (c.chargeMax - c.chargeCurrent)/chargeSpeed;
			
			
			// Compare number of hours to hours required
			int diff = Math.abs(hoursScheduledCount - hoursRequired);
			if (diff != 0)
			{
				double perc = (double)diff / (totalHours - hoursRequired) * maxFitness;
				carFitness -= perc;
			}	
			
			// Compare hours to given times
			for (int j = 0; j < 24; j++)
			{	
				hoursGivenString += solution[j];
				solutionString += (int)getCarAtGene(a_subject,j);
				solutionString += " ";
				
				if((int)getCarAtGene(a_subject,j) == i)
				{
					if (hoursGiven[j] == i)
					{
						carFitness -= Math.abs((c.prefStart-j));
					}
					else
					{
						carFitness -= Math.abs((c.prefStart-j))*2;
					}
				}
			}
			
			// Subtract carfitness from totalfitness
			fitness -= (100-carFitness);
			
			// test output
			System.out.println(hoursRequired + " " + solutionString + " " + " " + carFitness);
			
			// Increment which car
			i++;
		}
		
		//Fitness value cannot go lower than 1 or an exception will be thrown.
		if (fitness<1)		
			fitness = 1;
		return fitness;
	}
	
	
	// Return hours scheduled
	private String hoursScheduled(int[] solution, int carID)
	{
		String hours = "";
		for(int i = 0; i < 24; i++)
		{
			hours += getCarAtGene(a_subject, i);
		}
		return hours;
	}
	
	//Returns the number of hours a car is scheduled
	private static int numberOfHoursScheduled(IChromosome a_subject, int carID)
	{
		int hours = 0;
		
		for (int i = 0; i<24; i++)
		{
			if (getCarAtGene(a_subject, i) == carID)
				hours++;
		}
		
		return hours;
	}
	
	//Returns the ID of the car scheduled at the time a_position
	public static int getCarAtGene (IChromosome a_potentialSolution, int a_position)
	{
		Integer carAtTime = (Integer)a_potentialSolution.getGene(a_position).getAllele();
		
		return carAtTime.intValue();
	}

}
